{"version":3,"sources":["../src/colorable.js"],"names":[],"mappings":"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","file":"colorable.esm.js","sourcesContent":["import Color from '@xotic750/color';\nimport create from 'object-create-x';\nimport objectKeys from 'object-keys-x';\nimport defineProperties, {defineProperty} from 'object-define-properties-x';\nimport map from 'array-map-x';\nimport forEach from 'array-for-each-x';\nimport reduce from 'array-reduce-x';\nimport bind from 'bind-x';\nimport assign from 'object-assign-x';\nimport uniq from 'array-uniq-x';\nimport isArray from 'is-array-x';\n\nconst push = bind(bind.call, [].push);\nconst nativeFreeze = {}.constructor.freeze;\nconst freeze =\n  typeof nativeFreeze === 'function'\n    ? nativeFreeze\n    : function freeze(value) {\n        return value;\n      };\n\nconst NAME = 'name';\n\n/**\n * Constructor options.\n *\n * @typedef {object} ConstructorOptions\n * @property {string} [model] - Color model.\n * @property {string} [name] - The name of the color.\n * @property {*} value - Color value.\n */\n\n/**\n * The minimum values for WCAG rating.\n *\n * @type {Readonly}\n * @property {number} aa - AA minimum value.\n * @property {number} aaa - AAA minimum value.\n * @property {number} aaaLarge - AAA Large minimum value.\n * @property {number} aaLarge - AA Large minimum value.\n */\nexport const minimums = freeze({\n  aa: 4.5,\n  aaa: 7,\n  aaaLarge: 4.5,\n  aaLarge: 3,\n});\n\n/**\n * An object of pass and fail results for accessibility.\n *\n * @typedef {object} Accessibility\n * @property {boolean} aa - AA pass or fail.\n * @property {boolean} aaa - AAA pass or fail.\n * @property {boolean} aaaLarge - AAA Large pass or fail.\n * @property {boolean} aaLarge - AA Large pass or fail.\n */\n/**\n * WCAG rating keys.\n *\n * @type {ReadonlyArray<string>}\n */\nconst minimumsKeys = freeze(objectKeys(minimums));\n\n/**\n * BaseColor object.\n *\n * @class\n * @type {object}\n * @property {ReadonlyArray<Combination|object>} combinations - Combinations that matched threshold.\n * @property {string} hexColor - The hex color.\n * @property {string} [name] - The name of the color.\n */\nexport const BaseColor = function BaseColor(options) {\n  const {model, name, value} = options;\n  Color.call(this, value, model);\n\n  defineProperty(this, 'hexColor', {\n    enumerable: true,\n    value: new Color(this).hex(),\n  });\n\n  if (name) {\n    defineProperty(this, NAME, {\n      enumerable: true,\n      value: name,\n    });\n  }\n};\n\nobjectKeys(Color).forEach(function iteratee(key) {\n  defineProperty(BaseColor, key, {\n    configurable: true,\n    enumerable: true,\n    value: Color[key],\n  });\n});\n\nBaseColor.prototype = create(Color.prototype, {\n  constructor: {\n    value: BaseColor,\n  },\n});\n\n/**\n * Colorable object.\n *\n * @class\n * @type {object}\n * @property {ReadonlyArray<Combination|object>} combinations - Combinations that matched threshold.\n * @property {string} hexColor - The hex color.\n * @property {string} [name] - The name of the color.\n */\nexport const Colorable = function Colorable(options) {\n  BaseColor.call(this, options);\n\n  defineProperty(this, 'combinations', {\n    configurable: true,\n    enumerable: true,\n    value: [],\n  });\n};\n\nobjectKeys(BaseColor).forEach(function iteratee(key) {\n  defineProperty(Colorable, key, {\n    configurable: true,\n    enumerable: true,\n    value: BaseColor[key],\n  });\n});\n\nColorable.prototype = create(BaseColor.prototype, {\n  constructor: {\n    value: Colorable,\n  },\n\n  /**\n   * Give a compact representation.\n   *\n   * @function compact\n   * @returns {{hexColor: string, combinations: Array<{contrastRatio: number, hexColor: string, accessibility: Accessibility}>}} - Compact representation.\n   */\n  compact: {\n    configurable: true,\n    value: function compact() {\n      const value = {\n        combinations: map(this.combinations, function iteratee(combination) {\n          return combination.compact();\n        }),\n        hexColor: this.hexColor,\n      };\n\n      if (this.name) {\n        value.name = this.name;\n      }\n\n      return value;\n    },\n  },\n});\n\n/**\n * Combination object.\n *\n * @class\n * @type {object}\n * @property {Readonly<number>} accessibility - Accessibility scores.\n * @property {number} contrastRatio - The contrast ratio.\n * @property {string} hexColor - The hex color.\n * @property {string} [name] - The name of the color.\n */\nexport const Combination = function Combination(color, options) {\n  BaseColor.call(this, options);\n\n  const contrastRatio = new Color(color).contrast(new Color(this));\n  const iteratee = function iteratee(minimum, key) {\n    minimum[key] = contrastRatio >= minimums[key];\n\n    return minimum;\n  };\n\n  defineProperties(this, {\n    accessibility: {enumerable: true, value: freeze(reduce(minimumsKeys, iteratee, {}))},\n    contrastRatio: {enumerable: true, value: contrastRatio},\n  });\n};\n\nobjectKeys(BaseColor).forEach(function iteratee(key) {\n  defineProperty(Combination, key, {\n    configurable: true,\n    enumerable: true,\n    value: BaseColor[key],\n  });\n});\n\nCombination.prototype = create(BaseColor.prototype, {\n  constructor: {\n    value: Combination,\n  },\n\n  /**\n   * Give a compact representation.\n   *\n   * @function compact\n   * @returns {{contrastRatio: number, hexColor: string, accessibility: Accessibility}} - Compact representation.\n   */\n  compact: {\n    value: function compact() {\n      /** @type {Accessibility} */\n      const accessibility = assign({}, this.accessibility);\n      const value = {\n        accessibility,\n        contrastRatio: this.contrastRatio,\n        hexColor: this.hexColor,\n      };\n\n      if (this.name) {\n        value.name = this.name;\n      }\n\n      return value;\n    },\n  },\n});\n\n/**\n * Merge the default and user options.\n *\n * @param {object} options - The user option object.\n * @returns {Readonly} - The options object.\n */\nconst getOptions = function getOptions(options) {\n  return assign({compact: false, threshold: 0, uniq: true}, options);\n};\n\n/**\n * Creates a shallow copy of the original array or an array of unique values.\n *\n * @param {Array} array - The array of values.\n * @param {boolean} unique - Whether the returned array should be unique.\n * @returns {Array<any>} - An array of values.\n */\nconst getIterationArray = function getIterationArray(array, unique) {\n  return unique ? uniq(array) : array;\n};\n\n/**\n * Creates an array of color objects from the provided definitions.\n *\n * @param {Array<string>|object} colors - The color definitions.\n * @param {boolean} unique - Whether the results should be unique.\n * @returns {ReadonlyArray<Readonly<{name: any, value: *}>>} - An array of objects.\n * @throws {TypeError} - If definition is not an array or object.\n */\nconst getColors = function getColors(colors, unique) {\n  if (isArray(colors)) {\n    const iteratee = function iteratee(value) {\n      return {value};\n    };\n\n    return map(getIterationArray(colors, unique), iteratee);\n  }\n\n  if (colors && typeof colors === 'object') {\n    const iteratee = function iteratee(key) {\n      return {name: key, value: colors[key]};\n    };\n\n    return map(getIterationArray(objectKeys(colors), unique), iteratee);\n  }\n\n  throw new TypeError('Must provide an array or object');\n};\n\n/**\n * Colorable combination contrast tester.\n *\n * @param {Array|object} [colors] - The color definitions.\n * @param {object} [options] - User options.\n * @returns {ReadonlyArray<Readonly>} - An array objects in colorable format.\n */\nexport default function colorable(colors, options) {\n  const opts = getOptions(options);\n  const colorsArray = getColors(colors, opts.uniq);\n\n  return freeze(\n    map(colorsArray, function iterateeOuter(textColor) {\n      const color = new Colorable(textColor);\n\n      forEach(colorsArray, function iterateeInner(backgroundColor) {\n        if (textColor === backgroundColor) {\n          return;\n        }\n\n        const combination = new Combination(color, backgroundColor);\n\n        if (combination.contrastRatio > opts.threshold) {\n          push(color.combinations, combination);\n        }\n      });\n\n      freeze(color.combinations);\n\n      return opts.compact ? color.compact() : color;\n    }),\n  );\n}\n"]}