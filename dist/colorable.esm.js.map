{"version":3,"sources":["../src/colorable.js"],"names":[],"mappings":"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","file":"colorable.esm.js","sourcesContent":["import assign from 'lodash/assign';\nimport cloneDeep from 'lodash/cloneDeep';\nimport uniq from 'lodash/uniq';\nimport Color from '@xotic750/color';\n\nconst NAME = 'name';\n\n/**\n * Constructor options.\n *\n * @typedef {object} ConstructorOptions\n * @property {string} [model] - Color model.\n * @property {string} [name] - The name of the color.\n * @property {*} value - Color value.\n */\n\n/**\n * The minimum values for WCAG rating.\n *\n * @type {Readonly}\n * @property {number} aa - AA minimum value.\n * @property {number} aaa - AAA minimum value.\n * @property {number} aaaLarge - AAA Large minimum value.\n * @property {number} aaLarge - AA Large minimum value.\n */\nexport const minimums = Object.freeze({\n  aa: 4.5,\n  aaa: 7,\n  aaaLarge: 4.5,\n  aaLarge: 3,\n});\n\n/**\n * An object of pass and fail results for accessibility.\n *\n * @typedef {object} Accessibility\n * @property {boolean} aa - AA pass or fail.\n * @property {boolean} aaa - AAA pass or fail.\n * @property {boolean} aaaLarge - AAA Large pass or fail.\n * @property {boolean} aaLarge - AA Large pass or fail.\n */\n/**\n * WCAG rating keys.\n *\n * @type {ReadonlyArray<string>}\n */\nconst minimumsKeys = Object.freeze(Object.keys(minimums));\n\n/**\n * BaseColor object.\n *\n * @class\n * @type {object}\n * @property {ReadonlyArray<Combination|object>} combinations - Combinations that matched threshold.\n * @property {string} hexColor - The hex color.\n * @property {string} [name] - The name of the color.\n */\nexport class BaseColor extends Color {\n  /**\n   * @param {ConstructorOptions} options -\n   */\n  constructor(options) {\n    const {model, name, value} = options;\n    super(value, model);\n\n    Object.defineProperty(this, 'hexColor', {\n      enumerable: true,\n      value: this.hex(),\n    });\n\n    if (name) {\n      Object.defineProperty(this, NAME, {\n        enumerable: true,\n        value: name,\n      });\n    }\n  }\n}\n\n/**\n * Colorable object.\n *\n * @class\n * @type {object}\n * @property {ReadonlyArray<Combination|object>} combinations - Combinations that matched threshold.\n * @property {string} hexColor - The hex color.\n * @property {string} [name] - The name of the color.\n */\nexport class Colorable extends BaseColor {\n  /**\n   * @param {ConstructorOptions} options -\n   */\n  constructor(options) {\n    super(options);\n\n    Object.defineProperty(this, 'combinations', {\n      enumerable: true,\n      value: [],\n    });\n  }\n\n  /**\n   * Give a compact representation.\n   *\n   * @returns {{hexColor: string, combinations: Array<{contrastRatio: number, hexColor: string, accessibility: Accessibility}>}} - Compact representation.\n   */\n  compact() {\n    const value = {\n      combinations: this.combinations.map((combination) => combination.compact()),\n      hexColor: this.hexColor,\n    };\n\n    if (this.name) {\n      value.name = this.name;\n    }\n\n    return value;\n  }\n}\n\n/**\n * Combination object.\n *\n * @class\n * @type {object}\n * @property {Readonly<number>} accessibility - Accessibility scores.\n * @property {number} contrastRatio - The contrast ratio.\n * @property {string} hexColor - The hex color.\n * @property {string} [name] - The name of the color.\n */\nexport class Combination extends BaseColor {\n  /**\n   * @param {Colorable} color -\n   * @param {ConstructorOptions} options -\n   */\n  constructor(color, options) {\n    super(options);\n\n    const contrastRatio = color.contrast(this);\n    Object.defineProperties(this, {\n      accessibility: {\n        enumerable: true,\n        value: Object.freeze(\n          minimumsKeys.reduce((minimum, key) => {\n            minimum[key] = contrastRatio >= minimums[key];\n\n            return minimum;\n          }, {}),\n        ),\n      },\n      contrastRatio: {\n        enumerable: true,\n        value: contrastRatio,\n      },\n    });\n  }\n\n  /**\n   * Give a compact representation.\n   *\n   * @returns {{contrastRatio: number, hexColor: string, accessibility: Accessibility}} - Compact representation.\n   */\n  compact() {\n    /** @type {Accessibility} */\n    const accessibility = {...this.accessibility};\n    const value = {\n      accessibility,\n      contrastRatio: this.contrastRatio,\n      hexColor: this.hexColor,\n    };\n\n    if (this.name) {\n      value.name = this.name;\n    }\n\n    return value;\n  }\n}\n\n/**\n * Merge the default and user options.\n *\n * @param {object} options - The user option object.\n * @returns {Readonly} - The options object.\n */\nconst getOptions = function getOptions(options) {\n  return Object.freeze(\n    assign(\n      {\n        compact: false,\n        threshold: 0,\n        uniq: true,\n      },\n      options,\n    ),\n  );\n};\n\n/**\n * Creates a shallow copy of the original array or an array of unique values.\n *\n * @param {Array} array - The array of values.\n * @param {boolean} unique - Whether the returned array should be unique.\n * @returns {ReadonlyArray<any>} - An array of values.\n */\nconst getIterationArray = function getIterationArray(array, unique) {\n  return Object.freeze(cloneDeep(unique ? uniq(array) : array));\n};\n\n/**\n * Creates an array of color objects from the provided definitions.\n *\n * @param {Array<string>|object} colors - The color definitions.\n * @param {boolean} unique - Whether the results should be unique.\n * @returns {ReadonlyArray<Readonly<{name: any, value: *}>>} - An array of objects.\n * @throws {TypeError} - If definition is not an array or object.\n */\nconst getColors = function getColors(colors, unique) {\n  if (Array.isArray(colors)) {\n    return Object.freeze(getIterationArray(colors, unique).map((value) => Object.freeze({value})));\n  }\n\n  if (colors && typeof colors === 'object') {\n    return Object.freeze(\n      getIterationArray(Object.keys(colors), unique).map((key) => Object.freeze({name: key, value: colors[key]})),\n    );\n  }\n\n  throw new TypeError('Must provide an array or object');\n};\n\n/**\n * Colorable combination contrast tester.\n *\n * @param {Array|object} [colors] - The color definitions.\n * @param {object} [options] - User options.\n * @returns {ReadonlyArray<Readonly>} - An array objects in colorable format.\n */\nexport default function colorable(colors, options) {\n  const opts = getOptions(options);\n  const colorsArray = getColors(colors, opts.uniq);\n\n  return Object.freeze(\n    colorsArray.map((textColor) => {\n      const color = new Colorable(textColor);\n\n      colorsArray.forEach((backgroundColor) => {\n        if (textColor === backgroundColor) {\n          return;\n        }\n\n        const combination = new Combination(color, backgroundColor);\n\n        if (combination.contrastRatio > opts.threshold) {\n          color.combinations.push(combination);\n        }\n      });\n\n      Object.freeze(color.combinations);\n\n      return opts.compact ? color.compact() : color;\n    }),\n  );\n}\n"]}